/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package tech.skagedal.assistant

import com.google.api.client.json.jackson2.JacksonFactory
import tech.skagedal.assistant.configuration.ConfigurationLoader
import tech.skagedal.assistant.configuration.Task
import tech.skagedal.assistant.configuration.TasksFile
import tech.skagedal.assistant.tasks.FileSystemLinterTaskFactory
import tech.skagedal.assistant.tasks.GmailCheckerTaskFactory
import tech.skagedal.assistant.tasks.IntervalTaskFactory
import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files
import kotlin.system.exitProcess

private const val EXIT_NORMAL = 0
private const val EXIT_ERROR = 1
private const val CHANGE_DIRECTORY = 10

class App(
    val fileSystem: FileSystem,
    val repository: Repository,
    val configurationLoader: ConfigurationLoader,
    val fileSystemLinterTaskFactory: FileSystemLinterTaskFactory,
    val intervalTaskFactory: IntervalTaskFactory,
    val gmailCheckerTaskFactory: GmailCheckerTaskFactory
) {
    fun run(): Int {
        val pass = {}
        val tasks = try {
            readTasks().tasks
        } catch (exception: ConfigurationLoader.BadConfigurationFormat) {
            System.err.println(exception.message)
            return 1
        }
        for (task in runnableTasks(tasks)) {
            val result = task.run()
            when (result) {
                TaskResult.Proceed -> pass()
                TaskResult.ActionRequired -> return EXIT_NORMAL
                is TaskResult.ShellActionRequired -> {
                    repository.setRequestedDirectory(result.directory)
                    return CHANGE_DIRECTORY
                }
            }
        }
        return EXIT_NORMAL
    }

    fun runnableTasks(tasks: List<Task>): List<RunnableTask> {
        return tasks.flatMap { task ->
            when (task) {
                Task.BrewUpgradeTask -> listOf(intervalTaskFactory.brewUpgradeTask())
                Task.FileSystemLintTask -> fileSystemLinterTaskFactory.standardTasks()
                is Task.GmailTask -> listOf(gmailCheckerTaskFactory.task(task.account))
            }
        }
    }

    private fun readTasks(): TasksFile {
        return Files.newBufferedReader(fileSystem.tasksYmlFile()).use { reader ->
            configurationLoader.loadTasks(reader)
        }
    }
}

fun main(args: Array<String>) {
    val processRunner = ProcessRunner()
    val fileSystem = FileSystems.getDefault()
    val repository = Repository(fileSystem)
    val configurationLoader = ConfigurationLoader()

    val fileSystemLinter = FileSystemLinterTaskFactory(
        fileSystem,
        processRunner
    )
    val intervalTaskRunner = IntervalTaskFactory(
        processRunner,
        repository
    )
    val gmailChecker = GmailCheckerTaskFactory(
        fileSystem,
        processRunner,
        JacksonFactory.getDefaultInstance()
    )
    val app = App(fileSystem, repository, configurationLoader, fileSystemLinter, intervalTaskRunner, gmailChecker)

    val status = app.run()
    exitProcess(status)
}
